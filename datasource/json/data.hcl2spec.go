// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package json

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	Program    []string          `mapstructure:"program" cty:"program" hcl:"program"`
	WorkingDir *string           `mapstructure:"working_dir" cty:"working_dir" hcl:"working_dir"`
	Query      map[string]string `mapstructure:"query" cty:"query" hcl:"query"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"program":     &hcldec.AttrSpec{Name: "program", Type: cty.List(cty.String), Required: false},
		"working_dir": &hcldec.AttrSpec{Name: "working_dir", Type: cty.String, Required: false},
		"query":       &hcldec.AttrSpec{Name: "query", Type: cty.Map(cty.String), Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Result map[string]string `mapstructure:"result" cty:"result" hcl:"result"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"result": &hcldec.AttrSpec{Name: "result", Type: cty.Map(cty.String), Required: false},
	}
	return s
}
